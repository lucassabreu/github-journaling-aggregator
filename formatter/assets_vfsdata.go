// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package formatter

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	mustUnmarshalTextTime := func(text string) time.Time {
		var t time.Time
		err := t.UnmarshalText([]byte(text))
		if err != nil {
			panic(err)
		}
		return t
	}

	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: mustUnmarshalTextTime("2009-11-10T23:00:00Z"),
		},
		"/html.html": &vfsgen۰CompressedFileInfo{
			name:             "html.html",
			modTime:          mustUnmarshalTextTime("2009-11-10T23:00:00Z"),
			uncompressedSize: 4288,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x6b\x53\xdb\x3a\x13\xfe\xde\x5f\xa1\xd7\xf3\xbe\x33\x65\x5a\x5b\x09\x09\xb4\xe4\x75\x32\x13\x20\xe1\x12\x48\x5b\x2e\x3d\xd0\x2f\x1d\xc5\x5a\xc7\x4a\x64\xc9\x48\x72\x42\xa0\xfc\xf7\x33\xbe\xe5\x86\x43\x39\xa7\xd3\x33\x87\x0f\x58\x96\x76\x57\xcf\xb3\x7e\x76\x91\x70\xff\x73\xf8\xe9\xe0\xea\xf6\x73\x07\x05\x26\xe4\xad\x37\x6e\xf1\x00\x42\x5b\x6f\x10\x72\x0d\x33\x1c\x5a\x8f\x8f\xc8\xb9\x4a\x46\xe8\xe9\xc9\xc5\xd9\x5c\xb2\x1a\x82\x21\xc8\x0b\x88\xd2\x60\x9a\x56\x6c\x7c\xfb\xa3\x85\xf0\x62\x49\x90\x10\x9a\xd6\x84\xc1\x34\x92\xca\x58\xc8\x93\xc2\x80\x30\x4d\x6b\xca\xa8\x09\x9a\x14\x26\xcc\x03\x3b\x7d\x79\x8f\x98\x60\x86\x11\x6e\x6b\x8f\x70\x68\x56\xdf\x23\x1d\x28\x26\xc6\xb6\x91\xb6\xcf\x4c\x53\xc8\x34\x74\x12\x9b\x33\x31\x46\x0a\x78\xd3\xd2\x66\xc6\x41\x07\x00\xc6\x42\x81\x02\xbf\x69\x05\xc6\x44\xba\x81\x71\x48\xee\x3d\x2a\x9c\x81\x94\x46\x1b\x45\xa2\xe4\xc5\x93\x21\x9e\x4f\xe0\xba\x53\x71\x2a\xf6\x00\x0c\xc1\x9e\xd6\x8b\x05\x27\x64\xc2\xf1\xb4\xb6\x10\x13\x06\x86\x8a\x99\x59\xd3\xd2\x01\xa9\x7d\xac\xdb\xf8\x76\x37\x3a\xdc\xed\x7e\xc5\x5f\x27\xdb\xc7\xa7\xa2\xbd\x6b\xde\x4d\x34\xbf\xde\xf5\xa7\xb7\x37\xa3\x83\xae\xf1\x3a\xd1\xf1\xa0\x7f\x5a\xe1\xb3\x76\x57\xdf\x5c\xe9\xd1\xfe\xc0\x27\x87\xa3\x87\xf6\x19\x7c\xd1\xfd\xdd\x73\x0b\x79\x4a\x6a\x2d\x15\x1b\x32\xd1\xb4\x88\x90\x62\x16\xca\x58\x17\x59\x4b\xf9\x24\x23\x84\x06\x92\xce\xd0\x63\x3a\x44\x28\x22\x94\x32\x31\xb4\x8d\x8c\x1a\xa8\xea\xec\x28\x08\xff\xbf\xb6\x34\x90\xc6\xc8\x70\x75\xf5\xe9\x4d\xfa\x70\x92\xcf\x09\x6a\x1e\x2d\x24\x6a\xc8\xc4\xdc\x63\xfb\x99\xbd\x21\x03\x0e\x73\x73\x5f\x0a\x63\x6b\xf6\x00\x0d\xe4\x7c\x5c\xb7\xcd\x4c\x0d\x45\x2c\x1c\xce\x3d\x28\xd3\x11\x27\xb3\x06\x1a\x70\xe9\x8d\x0b\xa4\xe9\x77\x6e\xa0\x6a\xa5\xf2\xbf\x22\x04\x42\x2e\xce\x39\xbb\x38\x13\x9d\x9b\x10\x4f\x93\x41\xd9\x04\x79\x9c\x68\xdd\xb4\x12\xe1\x10\x26\x40\xd9\x3e\x8f\x19\xb5\xb2\x14\x2d\x5b\xe4\x14\x3d\x0e\x44\xf9\xec\x3e\xb7\x40\xc8\x0d\x6a\x85\x89\x81\x7b\x63\x87\xb1\x01\x6a\xad\x29\x3a\xa8\xe5\x01\x31\x65\x93\x56\x46\xcc\x8d\x79\xe1\xc8\x99\x36\xf6\x50\xc9\x38\x42\x8b\x61\x82\x44\x07\xf3\x7d\x1e\x1f\x91\x22\x62\x08\xc8\xe9\x28\x25\x95\x46\x4f\x4f\xf9\x4a\x2a\xd8\x45\xa8\xc2\x9d\x19\x08\x33\x1c\xa9\x43\x8a\x83\xb3\xa5\x70\x20\x68\x11\xc4\xc5\x31\x2f\x60\x65\x09\x2f\x28\x65\xd9\x4f\x7e\xdb\x81\x9c\x80\xca\xc7\x0a\x74\x24\x85\x66\x13\x58\x24\xc2\x14\x45\x3d\x7f\x6f\x5d\x40\x24\x51\x9f\x84\xe0\x62\x13\xac\x2c\xa1\xf4\xab\xe4\x85\xda\x40\xd5\x7a\x02\xf6\x8f\x00\xc4\x33\xcb\xd6\x39\x68\x4d\x86\x2b\x21\x92\xf1\xd2\x66\xae\x29\xbe\x69\x41\xce\x2e\x92\x95\x3b\x6b\x64\x2f\xe5\x2b\xa5\xff\xdf\x61\x10\xa3\x46\x13\x45\x8a\x09\x83\xd2\xba\x6e\x60\x3c\x64\x26\x88\x07\x69\x25\x5b\xe8\x2d\x05\x05\xbe\x36\x0a\x39\x09\x13\x27\x61\xb2\x85\x56\x02\xb9\x46\xb5\x96\x5e\x93\x09\x9a\x26\x7d\xee\x90\xb5\x34\x5a\x6e\x75\xa0\x80\x18\xa0\x6d\x83\x7e\x20\x4a\x0c\x7c\x37\xf2\x7b\xb2\xdf\x26\x9f\x95\x89\x94\x06\xf3\x11\xdc\x2d\x23\xbd\x9a\x45\xb0\x85\xac\xcf\x31\xe7\x17\x70\x17\x83\x36\x9d\x09\x08\x63\xad\x65\x20\xfb\x49\xac\x50\x6e\x86\x5c\x92\xf7\xb8\x22\x3b\x4f\x4f\x38\x8a\x39\xc7\x09\xd2\xcf\x64\xc6\x25\xa1\xce\x52\x5c\xa7\x1f\x87\x03\x48\xc0\x66\x3a\x2b\x33\x59\xd4\x00\x59\x07\x5f\x0e\xbf\x08\xd2\xf6\x0c\x93\x62\x0b\x59\x1e\x97\x1a\x68\x39\xfc\x22\x44\xe9\xd6\xe7\xa0\x86\x40\x13\x3f\x14\x66\xc3\x44\x17\xc0\x35\xa4\x73\x1e\x11\x1e\xf0\x62\x76\x51\x0b\xab\xd1\x17\x0e\xe5\x9b\xaf\xe1\xdd\x18\x64\x53\xfc\x57\x24\x40\x46\x20\x5e\x4a\x80\x9d\xf4\xdb\x31\x95\x53\x51\x9e\x87\xfd\xa4\xd1\x97\x39\x6f\x04\x36\xa7\xbd\x59\x5c\x3a\x78\x51\x55\x3a\x00\x8a\x3c\x19\x86\xac\x5c\x56\xd9\xd2\x8a\xb0\x2e\x8f\xdb\xb9\x92\xca\x08\xe5\x75\x9c\x6c\x57\x22\xa5\x9f\x02\x3e\xd1\x3a\x06\xfd\x02\xe4\xd4\xa0\x14\x2a\x4b\x5d\x57\xa0\xa6\xc6\x9b\xd4\x9f\x2d\x16\xba\x47\x6f\x5f\x70\xdc\x4a\xa8\xbc\x4a\x45\x3f\x25\x98\x35\x92\x17\x08\x66\x52\x13\x50\x26\xb5\x0b\xf0\xf3\x30\x0a\x22\xa9\x99\x91\x6a\xb6\x49\x6f\xab\xaa\xcf\x3d\xd1\x0f\x64\x0a\xc2\x65\x39\x34\x0a\x00\xaf\xf9\x3d\x4b\x5c\x36\x97\xa6\xc4\xcb\xda\xe2\xaf\xd4\xe3\x2b\x91\x59\x25\xcd\xfa\x67\x00\xfe\x66\xc9\xcc\x2b\xf2\x02\x92\x13\xeb\x81\x0c\x43\x10\x2f\x35\xe7\x12\x61\x6c\x60\x33\x37\xcb\x83\x3a\xc7\x57\xe7\x67\xd7\x17\x67\x69\x8e\xbd\x6c\xae\xb4\x03\x27\xed\x1d\xa9\x7f\xa8\xff\xa3\x29\x33\x41\xa3\x34\xa7\xcf\x0b\xbe\x60\xb2\xa1\x7b\xbd\xae\xe2\xff\x15\x39\x66\x02\xb1\xdf\xd4\x5d\x7e\x5b\x56\x37\xfd\xb9\x58\x44\x5c\x6a\xc8\x65\x41\x9e\xd7\xc8\xfa\x81\xc6\xc5\xcb\x47\xa7\xc2\x69\x11\xce\xc5\x4b\xa7\x3a\x17\xa7\xe7\xce\xf4\xd8\x9e\x9d\xa1\x93\xcb\x8c\xa7\x58\x64\x90\x56\xde\xe2\x5a\xe6\x49\x0a\xce\xe8\x2e\x06\x35\x4b\x0f\x71\xd9\xd0\xae\x39\xdb\x4e\xd5\xd1\x9c\x85\xe9\xed\x6b\x54\x7a\xf9\xea\x9d\xd6\xe4\xf6\x61\xcf\x9c\x8c\x27\xb7\x27\xbd\xda\x75\xa7\xff\x10\x9e\x7f\xe8\x1d\x8c\x2f\x14\x56\x9d\x3d\xfc\x25\x1a\xee\x92\xf6\xb7\xa3\xd3\x69\xf7\xf0\xfc\x6b\xbf\x8d\x8f\xa2\xa3\x6e\x77\xaf\x16\xdc\x44\x47\x3b\xbd\x71\x7f\xe3\xe5\xab\xe5\xe2\x0c\xeb\x66\xd8\x54\x8c\xb4\xe3\x71\x19\x53\x9f\x13\x05\x29\x76\x32\x22\xf7\x98\xb3\x81\xc6\x91\x8c\x22\x50\xce\x48\xe3\xaa\x53\xad\x3a\x15\x1c\x87\xb4\x98\xdc\xcc\x67\x80\xaf\x77\x67\x11\xdb\xef\x1c\x47\x9f\x7c\x5c\x7f\x57\x15\x0f\xdd\x48\xed\xd4\xc4\xfd\xe5\xe5\xbb\xa3\xb3\x83\xb1\x3f\xdd\xa7\xdd\xfe\xd5\xbd\xf1\xf8\xdd\x1d\x88\x93\x4b\x7f\xda\x7e\x88\x7a\xe4\xbc\xdf\xed\x87\xa3\xfa\x2f\xf0\xf9\x4b\xb7\xe3\xd1\xfa\xe5\xb8\x9c\x4e\x50\x69\x0f\xd8\x8d\x17\xd4\xbf\x1d\xca\x0f\x26\xda\x0b\x7a\xdf\xea\x57\xfa\x78\xc0\x2a\xf5\x0f\x7d\xd5\x3b\x3a\xfb\x54\xbb\xec\x9c\xb6\x87\xf5\x9d\xd1\xcd\xbd\x38\x3a\xf1\x6f\x1f\xc6\xf5\x4b\xb6\x57\xb9\x38\x3c\xb9\xeb\x87\xd5\xd7\xd0\x71\x71\xa6\x39\x17\x67\xff\xa8\xf8\x33\x00\x00\xff\xff\xd9\x96\xa8\x36\xc0\x10\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/html.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
