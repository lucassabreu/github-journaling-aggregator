// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package formatter

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	mustUnmarshalTextTime := func(text string) time.Time {
		var t time.Time
		err := t.UnmarshalText([]byte(text))
		if err != nil {
			panic(err)
		}
		return t
	}

	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: mustUnmarshalTextTime("2017-09-27T01:31:24.637442806Z"),
		},
		"/html.html": &vfsgen۰CompressedFileInfo{
			name:             "html.html",
			modTime:          mustUnmarshalTextTime("2017-09-27T01:00:42.761344151Z"),
			uncompressedSize: 4221,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xdb\x53\xdb\xb8\x17\x7e\xef\x5f\xa1\x9f\xe7\xf7\x50\xa6\xb5\x45\x48\xa0\x85\x75\x32\x13\x20\xe1\x12\x48\x5b\x2e\x5d\xe8\x4b\x47\xb1\x8f\x63\x25\xb2\x64\x24\x39\x17\x68\xfe\xf7\x1d\xcb\x76\x6e\x38\x94\xdd\x4e\x77\x96\x07\x2c\x4b\xe7\x1c\x7d\xdf\xf1\x77\x0e\x12\xee\xff\x8e\x3f\x1d\xdd\xdc\x7f\x6e\xa1\x50\x47\xac\xf1\xc6\x2d\x1e\x40\xfc\xc6\x1b\x84\x5c\x4d\x35\x83\xc6\xd3\x13\x72\x6e\xd2\x11\x9a\xcd\x5c\x9c\xcd\xa5\xab\x11\x68\x82\xbc\x90\x48\x05\xba\x6e\x25\x3a\xb0\x3f\x5a\x08\x2f\x96\x38\x89\xa0\x6e\x8d\x28\x8c\x63\x21\xb5\x85\x3c\xc1\x35\x70\x5d\xb7\xc6\xd4\xd7\x61\xdd\x87\x11\xf5\xc0\x36\x2f\xef\x11\xe5\x54\x53\xc2\x6c\xe5\x11\x06\xf5\xca\x7b\xa4\x42\x49\xf9\xd0\xd6\xc2\x0e\xa8\xae\x73\x61\x42\xa7\xb1\x19\xe5\x43\x24\x81\xd5\x2d\xa5\xa7\x0c\x54\x08\xa0\x2d\x14\x4a\x08\xea\x56\xa8\x75\xac\x0e\x30\x8e\xc8\xc4\xf3\xb9\xd3\x13\x42\x2b\x2d\x49\x9c\xbe\x78\x22\xc2\xf3\x09\x5c\x73\xb6\x9d\x6d\xbb\x07\x9a\x60\x4f\xa9\xc5\x82\x13\x51\xee\x78\x4a\x59\x88\x72\x0d\x7d\x49\xf5\xb4\x6e\xa9\x90\x54\x3f\xd6\x6c\x7c\xbf\x17\x1f\xef\xb5\xbf\xe2\xaf\xa3\x9d\xd3\x73\xde\xdc\xd3\xef\x46\x8a\xdd\xee\x05\xe3\xfb\xbb\xc1\x51\x5b\x7b\xad\xf8\xb4\xd7\x3d\xdf\x66\xd3\x66\x5b\xdd\xdd\xa8\xc1\x61\x2f\x20\xc7\x83\xc7\xe6\x05\x7c\x51\xdd\xbd\x4b\x0b\x79\x52\x28\x25\x24\xed\x53\x5e\xb7\x08\x17\x7c\x1a\x89\x44\x15\x59\x33\x7c\xd2\x11\x42\x3d\xe1\x4f\xd1\x93\x19\x22\x14\x13\xdf\xa7\xbc\x6f\x6b\x11\x1f\xa0\x8a\xb3\x2b\x21\xfa\x63\x6d\xa9\x27\xb4\x16\xd1\xea\xea\xec\x8d\x79\x38\xe9\xe7\x04\x39\x8f\x16\x11\xd9\xa7\x7c\xee\xb1\xf3\xcc\x5e\x93\x1e\x83\xb9\x79\x20\xb8\xb6\x15\x7d\x84\x03\xe4\x7c\x5c\xb2\x45\xc8\xc5\x39\x60\x17\x67\x8a\x71\x53\xd4\x86\x89\x4f\x47\xc8\x63\x44\xa9\xba\x95\x7e\x75\x42\x39\x48\x3b\x60\x09\xf5\xad\x8c\xdf\xb2\x45\x8e\xcf\x63\x40\x64\x40\x27\xb9\x05\x42\x6e\x58\x2d\x4c\x34\x4c\xb4\x1d\x25\x1a\x7c\x6b\x4d\x8e\x61\x35\x0f\x88\x7d\x3a\x6a\x64\x0c\xdc\x84\x15\x8e\x8c\x2a\x6d\xf7\xa5\x48\x62\xb4\x18\xa6\x48\x54\x38\xdf\xe7\xe9\x09\x49\xc2\xfb\x80\x9c\x96\x94\x42\x2a\x34\x9b\xe5\x2b\x46\x6d\x8b\x50\x85\x3b\xd5\x10\x65\x38\x8c\x83\xc1\xc1\xe8\x52\x38\xe0\x7e\x11\xc4\xc5\x09\x2b\x60\x65\x89\x2d\x28\x99\x17\xf3\xdb\x0e\xc5\x08\x64\x3e\x96\xa0\x62\xc1\x15\x1d\xc1\x22\x11\xba\xa8\xc8\xf9\x7b\xe3\x0a\x62\x81\xba\x24\x02\x17\xeb\x70\x65\x09\x99\xaf\x92\x57\xd9\x01\xaa\xd4\x52\xb0\x7f\x86\xc0\x9f\x59\x36\x2e\x41\x29\xd2\x5f\x09\x91\x8e\x97\x36\x73\x75\xf1\x4d\x0b\x72\x76\x91\xac\xdc\x59\x21\x7b\x29\x5f\x86\xfe\xff\xfb\x61\x82\x0e\xea\x28\x96\x94\x6b\x64\x8a\xf2\x00\xe3\x3e\xd5\x61\xd2\x33\x65\x68\xa1\xb7\x3e\x48\x08\x94\x96\xc8\x49\x99\x38\x29\x93\x2d\xb4\x12\xc8\xd5\xb2\xb1\xf4\x9a\x4e\xf8\x26\xe9\x73\x87\xac\x1f\xf9\xe5\x56\x47\x12\x88\x06\xbf\xa9\xd1\x0f\xe4\x13\x0d\xdf\xb5\xf8\x9e\xee\xb7\xc9\x67\x65\xc2\xd0\xa0\x01\x82\x87\x65\xa4\x37\xd3\x18\xb6\x90\xf5\x39\x61\xec\x0a\x1e\x12\x50\xba\x35\x02\xae\xad\xb5\x0c\x64\x3f\xa9\x15\xca\xcd\x90\x4b\xf2\x06\x55\x64\x67\x36\xc3\x71\xc2\x18\x4e\x91\x7e\x26\x53\x26\x88\xef\x2c\xc5\x75\xba\x49\xd4\x83\x14\x6c\xa6\xb3\x32\x93\x45\x0d\x90\x75\xf0\xe5\xf0\x8b\x20\x4d\x4f\x53\xc1\xb7\x90\xe5\x31\xa1\xc0\x2f\x87\x5f\x84\x28\xdd\xfa\x12\x64\x1f\xfc\xd4\x0f\x45\xd9\x30\xd5\x05\x30\x05\x66\xce\x23\xdc\x03\x56\xcc\x2e\x6a\x61\x35\xfa\xc2\xa1\x7c\xf3\x35\xbc\x1b\x83\x6c\x8a\xff\x8a\x04\x88\x18\xf8\x4b\x09\xb0\xd3\x66\x39\xf4\xc5\x98\x97\xe7\xe1\x30\xed\xd2\x65\xce\x1b\x81\xcd\x69\x6f\x16\x97\x0a\x5f\x54\x95\x0a\xc1\x47\x9e\x88\x22\x5a\x2e\xab\x6c\x69\x45\x58\xd7\xa7\xcd\x5c\x49\x65\x84\xf2\x3a\x4e\xb7\x2b\x91\xd2\x4f\x01\x9f\x29\x95\x80\x7a\x01\xb2\x31\x28\x85\x4a\x8d\xeb\x0a\x54\x63\xbc\x49\xfd\xd9\x62\xa1\x7b\xf4\xf6\x05\xc7\xad\x94\xca\xab\x54\xf4\x53\x82\x59\x23\x79\x81\x60\x26\x35\x0e\x65\x52\xbb\x82\x20\x0f\x23\x21\x16\x8a\x6a\x21\xa7\x9b\xf4\xb6\xaa\xfa\xdc\x13\xfd\x40\xba\x20\x5c\x96\x43\x2d\x01\xf0\x9a\xdf\xb3\xc4\x65\x73\x26\x25\x5e\xd6\x16\x7f\xa5\x1e\x5f\x89\xcc\x2a\x69\xd6\x3f\x03\xf0\x0f\x4b\x66\x5e\x91\x57\x90\x1e\x37\x8f\x44\x14\x01\x7f\xa9\x39\x97\x08\x63\x03\x9b\xb9\x59\x1e\xd4\x39\xbd\xb9\xbc\xb8\xbd\xba\x30\x39\xf6\xb2\xb9\xd2\x0e\x9c\xb6\x77\x24\xff\xa5\xfe\x8f\xc6\x54\x87\x07\xa5\x39\x7d\x5e\xf0\x05\x93\x0d\xdd\xeb\x75\x15\xff\x9f\xc8\x31\xe5\x88\xfe\xa6\xee\xf2\xdb\xb2\xba\xe9\xcf\xc5\x22\xe2\x52\x43\x2e\x0b\xf2\xbc\x46\xd6\x0f\x34\x2e\x5e\x3e\x3a\x15\x4e\x8b\x70\x2e\x5e\x3a\xd5\xb9\xd8\x9c\x3b\xcd\xb1\x3d\x3b\x43\xa7\x37\x11\x4f\xd2\x58\x23\x25\xbd\xc5\x9d\xca\x13\x3e\x38\x83\x87\x04\xe4\xd4\x1c\xe2\xb2\xa1\x5d\x75\x76\x9c\x8a\xa3\x18\x8d\xcc\xd5\x69\x50\x7a\x73\xea\x9c\x57\xc5\xce\x71\x47\x9f\x0d\x47\xf7\x67\x9d\xea\x6d\xab\xfb\x18\x5d\x7e\xe8\x1c\x0d\xaf\x24\x96\xad\x7d\xfc\x25\xee\xef\x91\xe6\xb7\x93\xf3\x71\xfb\xf8\xf2\x6b\xb7\x89\x4f\xe2\x93\x76\x7b\xbf\x1a\xde\xc5\x27\xbb\x9d\x61\x77\xe3\xcd\xa9\xe1\xe2\x0c\xeb\x66\xd8\x3e\x1f\x28\xc7\x63\x22\xf1\x03\x46\x24\x18\xec\x64\x40\x26\x98\xd1\x9e\xc2\xb1\x88\x63\x90\xce\x40\xe1\x8a\x53\xa9\x38\xdb\x38\x89\xfc\x62\x72\x33\x9f\x1e\xbe\xdd\x9b\xc6\xf4\xb0\x75\x1a\x7f\x0a\x70\xed\x5d\x85\x3f\xb6\x63\xb9\x5b\xe5\x93\xeb\xeb\x77\x27\x17\x47\xc3\x60\x7c\xe8\xb7\xbb\x37\x13\xed\xb1\x87\x07\xe0\x67\xd7\xc1\xb8\xf9\x18\x77\xc8\x65\xb7\xdd\x8d\x06\xb5\x5f\xe0\xf3\xb7\xae\xb6\x83\xf5\x9b\x6d\x39\x9d\x70\xbb\xd9\xa3\x77\x5e\x58\xfb\x76\x2c\x3e\xe8\x78\x3f\xec\x7c\xab\xdd\xa8\xd3\x1e\xdd\xae\x7d\xe8\xca\xce\xc9\xc5\xa7\xea\x75\xeb\xbc\xd9\xaf\xed\x0e\xee\x26\xfc\xe4\x2c\xb8\x7f\x1c\xd6\xae\xe9\xfe\xf6\xd5\xf1\xd9\x43\x37\xaa\xbc\x86\x8e\x8b\x33\xcd\xb9\x38\xfb\x2f\xc3\x5f\x01\x00\x00\xff\xff\xa7\x84\xe8\xd9\x7d\x10\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/html.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
