// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package formatter

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	mustUnmarshalTextTime := func(text string) time.Time {
		var t time.Time
		err := t.UnmarshalText([]byte(text))
		if err != nil {
			panic(err)
		}
		return t
	}

	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: mustUnmarshalTextTime("2017-09-24T14:36:48.691691797Z"),
		},
		"/.html.html.swp": &vfsgen۰CompressedFileInfo{
			name:             ".html.html.swp",
			modTime:          mustUnmarshalTextTime("2017-09-24T14:36:56.924865598Z"),
			uncompressedSize: 12288,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\xcd\x8b\x1c\xc5\x1b\xc7\xbf\xf9\xc1\x6f\x36\xbb\x3b\x3b\x1b\x34\x78\x11\xa4\x6c\x83\x18\xb4\xbb\x67\x13\x84\x65\xed\x1d\x13\x24\x60\xc0\xac\x21\xd9\x04\xcc\x65\xa8\xed\xae\xe9\xe9\x4d\x75\x57\xa7\xaa\x3a\xbb\xe3\xb8\x8a\x17\x41\xf4\xe0\x49\x72\x12\x44\x10\xfc\x2f\x04\xc1\x5c\xbc\x98\x20\x04\xc4\x93\xe0\xc1\x9b\x04\x41\x4f\x4a\xbf\xcc\xa4\x77\x76\x36\x89\x49\x50\xc4\xfa\x1c\x32\x5d\x4f\x3d\xf5\xbc\x54\x3f\xfd\x54\x87\xed\x8d\xf6\xc5\xd3\x67\xc8\xb2\xd3\x06\x80\x43\x00\xbe\xba\xfe\xc6\x8f\x17\xd7\xf1\x44\x0a\xf0\xcc\xa7\x0a\xf7\x66\xed\xf5\x75\xfb\xb5\x0b\xaf\x9c\x3c\x7f\x0f\xbd\xb7\x0b\x83\xee\x96\x90\x97\x55\x4a\x7d\xe6\x86\x82\xd3\x24\x74\x95\xf4\xdd\x30\xd2\xfd\x6c\xc3\xf1\x45\xec\x16\x5a\x8a\x6e\x48\x96\x55\x62\x7b\x53\x64\x32\xa1\x3c\x4a\x42\x9b\x86\xa1\x64\x21\xd5\x42\xba\x3d\x21\x63\xaa\x35\x93\x2e\x55\x8a\x69\xe5\xf6\x75\xcc\x9d\xfc\x9f\xfb\x08\xda\x60\xf8\x2f\x91\xe9\x9e\xbd\xbc\x80\xe3\xc7\x96\x8a\x47\xfd\x19\xeb\x69\xf2\xf8\x63\x17\xfe\xe9\xa8\x0c\x06\x83\xc1\x60\x30\x18\x0c\x06\xc3\xdf\x88\x4e\x0f\xe0\x1d\x00\xff\xab\xc6\x27\xaa\xdf\x03\x13\xbf\x06\x83\xc1\x60\x30\x18\x0c\x06\x83\xc1\x60\x30\x18\xfe\xbd\xd0\x00\xb8\xf0\x7f\xe0\x4a\xa3\xfc\xfb\xff\xe8\xff\xff\x7f\x2c\x02\xbf\x2d\x02\xbf\x2c\x02\x37\x17\x81\xed\x45\xe0\xf0\x22\x30\xb7\x08\xdc\x6e\x01\xb7\x5a\xc0\x8d\x16\xf0\x6d\x0b\xf8\xb2\x05\x7c\xd1\x02\x3e\x6b\x01\xd7\x5a\xc0\x47\x2d\xe0\xfd\x16\xf0\x62\x0b\xb8\xbe\x00\x7c\xb2\x00\xb0\x05\xe0\xd2\x02\xb0\xb6\x00\x1c\x5d\x00\x7e\x6d\x02\xdf\x37\x81\xcf\x9b\xc0\xc7\x4d\xe0\xc3\x26\xf0\x41\x13\x78\xa1\x09\x3c\xd5\x04\x6e\xcd\x03\xd7\xe6\x81\xf3\xf3\xc0\xa1\x79\xe0\xc0\x3c\x70\x7b\x0e\xf8\x6e\x0e\xf8\x7a\x0e\x18\xce\x01\x47\xe6\x80\x1b\xb3\xc0\x70\x16\x58\x9e\x05\x9e\x9d\x05\x7e\x3a\x08\x9c\x3b\x08\x1c\x3e\x08\x7c\x3a\x03\xbc\x37\x03\x5c\x9a\x01\x4e\xcc\x00\xf6\x0c\xf0\xe4\x0c\x30\x3f\x03\xfc\xde\x00\x7e\x6e\x00\x3f\x34\x80\x9b\x0d\xe0\x9b\x06\xf0\x6e\x03\x18\x34\xaa\xbd\x30\x18\x0c\x06\xc3\xa3\xc5\x2b\xbe\xd2\xea\xc0\x73\x37\x44\x30\xe8\xc0\x53\xbe\x8c\x52\x4d\x02\xd6\x63\x92\x28\xe9\xaf\x5a\x7d\xad\x53\xb5\xe2\xba\xbe\x08\x98\x13\x32\x1d\x07\xdc\x89\x84\xbb\xe4\x1c\x77\xda\x6e\x4c\x35\x93\x11\xe5\x4e\x1c\x25\xce\xa6\xb2\x3a\x9e\x5b\x5a\xc8\x4d\x06\xd1\xd5\x0e\x08\xf1\xdc\x98\x46\x49\x7e\x95\x5f\x6b\xba\xc1\x59\x39\x28\x86\xa5\x5f\x52\x31\x1c\x12\x96\x04\x64\x67\x67\x2c\x29\x94\x64\xa7\x36\x2e\x24\xc1\x6e\x49\x2e\x4b\x27\x45\xd3\xcd\xd5\xe6\x9c\x33\x4c\x29\x1a\x32\xf2\x16\x89\xa9\xbc\x1c\x88\xad\x64\x9a\x6e\x6e\x85\x2b\x36\x6d\xea\x6c\xa6\xfa\x2c\x20\xbe\x88\xe3\x48\x13\x8f\x92\xbe\x64\xbd\x55\x6b\x38\x24\x47\xc2\x7e\x46\x76\x76\xdc\x72\xca\xcd\xbd\x9d\xa5\x03\x2e\x68\xe0\x9c\x7f\xf5\x24\xd9\xd9\xb1\x3a\x75\xd9\xd4\x48\x3c\x97\x4e\xcf\x29\x8f\x26\xea\x11\x76\x85\x3c\x17\x30\xc9\x7a\x4a\x4b\xe2\xac\x0f\x52\x76\x94\x58\x79\x48\xa7\xae\xb2\x44\x5b\xd3\x03\xe6\x9c\x9c\x63\x57\x32\xa6\xa6\xc7\x9b\x66\x9c\xef\x8a\x36\x5f\x51\x2d\x70\xd6\xb2\x78\x83\xc9\x3d\xc1\xd7\x55\xd6\x23\xcd\x59\x15\x3b\xa9\x2b\x9d\xf4\x75\x24\xf6\xdb\xdf\xfd\x93\x19\x5b\xde\x2f\x27\x6f\xe2\xbe\x7b\x3a\x20\x3e\xa7\x4a\xad\x5a\x71\xc0\xed\x80\x6a\x6a\x17\x45\xd7\xed\xfa\x8c\x73\xdb\x4e\x44\x62\x27\x59\xcc\x64\xe4\x93\xb8\xdc\x76\xeb\xc1\x4d\x58\x1d\x2f\x2d\x36\xe3\x1c\x4b\x85\xb3\x46\xe3\x32\xf9\xb4\xb3\xb7\x48\x1f\xc8\x6c\xbe\x11\x8f\xd6\x62\xb1\x91\x77\x0d\x74\x54\x0e\x2b\xab\x24\x95\x51\xa2\x49\xd1\x04\x56\xdc\xfa\x77\xa1\x56\xfd\x6e\x8d\x73\x3f\x3a\xf1\xe8\xd6\x9f\xdc\xe1\x90\x48\x9a\x84\x6c\xfc\xd8\xa9\x3b\xca\xde\xae\x3e\xe0\xb9\xba\xcf\x68\x2d\x28\x4f\xf7\xff\x42\x9e\x95\xf9\xdc\xca\x83\x9a\xc8\x13\x22\x79\x42\x0f\x63\x24\xbf\x75\x0f\xb3\xbe\xb8\x51\x7b\xa2\xf0\x6a\x7b\xe3\x15\x8b\xa7\x9b\x24\xf9\x70\x53\x4d\x4a\x54\x9f\x06\x62\xcb\xb6\x8f\x05\x69\x31\xce\xfd\x8e\x2f\x6c\x7b\xe9\x98\xed\x0b\x6e\x75\x50\xb5\xeb\x8c\x8f\xfc\xee\xed\xa5\x1e\x8f\xea\xae\x79\xa4\x74\xb7\x1b\x69\x16\x97\xdd\xe1\x94\x94\x42\x16\x35\xc6\xa3\x9a\x91\xaa\x06\x8a\xd9\x71\x05\x78\x19\x9f\x34\x75\xd7\xe8\x08\xf1\xf2\x43\x65\xd7\x1a\x3a\x10\x99\xee\x76\x7d\x91\xe8\xbc\x53\x94\x47\x4f\xbe\x57\x4c\x8e\x0e\x9f\xea\x44\x2a\x06\x2a\xa5\x53\xd6\xdb\x3a\xef\x5f\x65\x02\x77\x5a\x59\xae\x5b\xd9\x08\xa2\xab\xd3\xbc\x96\x7e\x6c\x29\xb6\x4a\xc7\xe5\x78\x7f\x4d\x32\x65\xb1\xad\x7c\x29\x46\xf9\x0a\x2e\xa4\x6d\x87\x92\x0d\xec\xa5\x76\xbb\x26\xd3\x6c\x5b\x57\x13\xcb\xed\xb6\xd5\xc1\xf4\x90\x6a\x0e\x6c\xbb\x17\x6d\xb3\xc0\xae\x79\xde\x54\x75\xb5\x09\x67\xb9\xcd\xea\x75\xc0\x1d\xd5\x9a\xe7\x2a\x3d\x18\x1d\xdc\xa3\x12\xe8\x89\x44\xdb\x2a\x7a\x93\xad\x90\xa5\xe3\xe9\xf6\x4b\x85\xb8\x2c\x35\x1d\x90\x94\x0c\xb1\x4b\x7d\xab\x1f\x69\x66\x17\x1f\x9b\xaf\x90\x44\xc8\x98\xf2\xdd\x4b\x9c\xaa\x1d\x93\x61\xee\x71\xec\xd0\xe3\x51\x72\x99\x48\xc6\x57\xad\x42\xa6\xfa\x8c\x69\xab\x3a\xba\xee\xef\xf5\x24\x60\x2c\xed\xa6\x99\x4c\x39\xb3\xa3\x24\x88\x42\x51\xbc\xb1\xf8\x4a\x59\xc4\xbd\x6f\x1f\x79\xbe\xca\x09\x85\x08\x39\xa3\x69\xa4\x8a\x46\x18\xf9\x22\x79\xb9\x47\xe3\x88\x0f\x56\xcf\x54\xfe\x9e\x3f\xed\x8b\x64\x6c\xba\x28\xa9\x89\x8a\x2a\x65\xf0\xca\xfd\xf5\xca\xb7\x30\xfc\x19\x00\x00\xff\xff\xa5\xd3\x4a\xd3\x00\x30\x00\x00"),
		},
		"/html.html": &vfsgen۰CompressedFileInfo{
			name:             "html.html",
			modTime:          mustUnmarshalTextTime("2017-09-24T14:36:48.658359109Z"),
			uncompressedSize: 2447,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x96\xcd\x8e\xdb\x36\x10\xc7\xef\x7e\x8a\x81\xd0\x43\x83\x82\xe2\x6e\x72\x29\x5c\x5a\x45\x0e\x01\xda\x43\x82\x20\xcd\x5d\xe0\x8a\x63\x89\x09\xbf\x42\x52\xbb\xeb\xba\x7e\xf7\x82\x14\xed\x95\xbd\x6a\xb0\xcd\xae\x4f\x34\x67\xe6\x47\xfe\x39\xc3\xa1\x56\x6c\x88\x5a\x35\x2b\x36\x20\x17\xcd\x0a\x80\x45\x19\x15\x36\xfb\x3d\xd4\x9f\xd3\x08\x0e\x07\x46\xa7\xb9\x64\x55\xd2\x7c\x05\x8f\x6a\x53\x85\xb8\x53\x18\x06\xc4\x58\xc1\xe0\x71\xbb\xa9\x86\x18\x5d\x58\x53\xba\xb5\x26\x86\xba\xb7\xb6\x57\xc8\x9d\x0c\x75\x67\x35\x95\x9d\x35\xbf\x6f\xb9\x96\x6a\xb7\x79\xcf\x23\x7a\xc9\xd5\x2f\x7f\x76\xd6\x84\x0a\xe8\x93\xd1\x9d\x15\x58\xf7\x18\xb5\x50\xb5\xb4\xf4\xba\x7e\x53\x5f\x51\x5d\x70\xb5\x40\x74\xad\x1b\xbd\x53\x48\xa4\x11\xb2\xb7\xb5\x96\xa6\xee\xc2\x69\x8d\x4c\x4e\x23\x80\xc8\x6f\x14\x42\x14\xb5\xc6\x10\x78\x8f\xb0\xcf\xd3\x00\x77\x83\x8c\x48\x82\xe3\x1d\xae\xc1\x58\xaf\xb9\xfa\x2d\x9b\x0e\xab\xb3\x40\x70\xa7\x90\xa4\x98\x04\xf9\x37\xae\xe1\xfa\x8d\xbb\x3f\xba\x03\x30\x5a\x56\x64\x74\x3a\x60\x76\x63\xc5\xae\x59\x31\x21\x6f\xa1\x53\x3c\x84\x4d\xa5\x85\x22\x8a\xef\xec\x18\xe1\x61\x48\xc8\x56\xde\xa3\x20\x29\x0a\x7d\x36\x7c\x09\x73\xb7\xce\x2a\xeb\x09\xe9\x3d\xee\xc8\xf5\xd5\x55\x95\xe5\x15\xef\x47\xe0\xb6\x9d\x71\xce\xa7\x08\x09\x9d\xb7\x4a\x2d\x41\x67\x73\x11\xef\x63\x31\xfc\x5a\x56\x03\x58\x56\x71\x22\x7b\x7b\x57\x1c\xd3\xc9\x3b\x6e\x1e\xfb\x92\x5c\x59\xd5\x45\xb9\x25\xdf\xb2\x02\x15\xf2\x36\x4b\xa3\x13\x34\x8f\x35\x97\x0b\xac\xb6\xed\xac\x89\x68\xe2\x71\x77\xa3\x3a\x73\x92\xa1\x9c\x1c\x1e\xd5\xa2\x52\x84\x5c\xbf\x4e\x12\x4f\x1b\xdd\xef\xc1\x73\xd3\x23\xd4\xef\xbc\xb7\x3e\xc0\xe1\x50\x2c\xb9\x44\x2f\x89\x6d\x2b\x23\xea\x49\x40\x0e\xc8\x02\x94\x9c\xe1\xd0\x88\x23\x84\xd1\x51\x35\x53\x15\xb1\xa9\x8c\x66\x38\xc1\x23\x27\xd3\x6c\x49\xf7\xc5\x4c\x18\xb8\xb0\x77\x84\xbc\x16\xee\x09\x42\x58\x3c\x5e\xe9\xd3\xff\xe5\xd5\xda\x76\x8a\x37\xd6\x10\x33\x6a\xf4\xb2\xab\x9a\x77\xb7\x68\x22\x7c\xe0\x1a\x19\x8d\xc3\x8f\x52\x3e\xef\xdc\xb3\xe2\x3f\xa1\xb3\xcf\xde\xc4\xfb\xe9\x7e\xcf\x11\x69\x3c\x3b\x1c\x16\xa7\x5b\x79\xe4\x3f\xd4\x40\x89\x3d\xab\x82\xe4\xef\x9b\xd9\xdf\x1c\xf0\x53\x3f\x8c\xb0\xde\x80\xf3\xd2\x44\xc8\x0d\x6b\x4d\x69\x2f\xe3\x30\xde\xe4\x06\x58\xc1\xcf\x02\x3d\x6e\x43\xf4\x50\x27\x61\x75\x12\xf6\xea\x9c\x9c\xd8\xe2\x7f\x68\x63\x6e\xaa\xbc\x94\xad\x84\xcb\xd5\xe7\x1a\x46\xa3\x68\x9e\x8f\x4d\xe9\x7b\x59\xe2\x49\xf7\x8b\x60\xa1\xb4\xee\xea\x1c\x01\xc0\xdc\xe5\x4c\xce\x91\xdc\x02\x7e\x9b\xa7\x21\x09\x7c\x05\xd5\xc7\x51\xa9\x4f\xf8\x6d\xc4\x10\xf3\x49\x56\x97\x49\x49\xbf\xe4\x04\xc5\x0b\x18\x2f\x0f\xd3\x31\xf3\x87\x03\x75\xa3\x52\x34\x89\xfc\xc8\x77\xca\x72\x51\xcf\xb0\xf5\x87\x51\xdf\x60\x6a\x0e\x53\xab\x58\x72\x79\xe8\x7f\xbc\x81\xb9\xd3\xdb\x2e\x4a\x6b\x96\xf6\x94\xba\x8b\x0a\xf8\x1d\x61\x61\xf8\x9e\xa2\x30\xa0\x80\xce\x6a\x2d\x97\x25\x4d\xa6\x33\x51\x7f\xfd\xf1\xf6\x91\x8a\x72\x4b\xe0\x1f\xd0\xdc\x7f\x15\xf6\xce\x14\x19\xff\xb9\xe1\x85\xdd\x64\xe3\x32\x6a\x11\xf3\xd0\x55\x67\x79\xa7\x17\x89\xbf\xac\x2f\x46\xe7\x57\xf7\x12\xc3\xe8\xac\x11\x30\x9a\xcb\x6e\x7a\x7c\xd2\x8b\x93\x1e\xf1\xfc\x1a\xb1\xd0\x79\xe9\x22\x08\xdc\xa2\x87\xe0\xbb\xa7\x7e\x9f\xa4\x8f\x91\x2f\xa1\x6a\x18\x9d\x08\x89\x58\xbe\x07\xe8\xf4\x19\xf6\x6f\x00\x00\x00\xff\xff\xc4\xed\x2c\xff\x8f\x09\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/.html.html.swp"].(os.FileInfo),
		fs["/html.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
