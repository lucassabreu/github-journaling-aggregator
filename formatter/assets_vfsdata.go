// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package formatter

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	mustUnmarshalTextTime := func(text string) time.Time {
		var t time.Time
		err := t.UnmarshalText([]byte(text))
		if err != nil {
			panic(err)
		}
		return t
	}

	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: mustUnmarshalTextTime("2017-09-24T12:12:26.96547426Z"),
		},
		"/html.html": &vfsgen۰CompressedFileInfo{
			name:             "html.html",
			modTime:          mustUnmarshalTextTime("2017-09-24T12:08:33.413Z"),
			uncompressedSize: 1304,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\xbd\x6e\xdb\x30\x10\xc7\xf7\x3c\x05\xa1\xb5\x20\xe9\xb4\x4b\x50\xd0\xea\xd4\xa1\x43\x3a\x75\x17\x18\xf2\x2c\x31\xe1\x87\x40\x5e\x9c\x18\x82\xdf\xbd\xa0\xc8\xc4\xb2\xad\x02\x69\xbb\x51\xff\x3b\xfd\xee\x83\xc7\x13\x03\x3a\xdb\xde\x88\x01\xa4\x6e\x6f\x08\x11\x68\xd0\x42\x3b\x4d\x84\xfd\xca\x27\x72\x3c\x0a\x5e\xb4\x6c\xb5\xc6\x3f\x91\x08\x76\xdb\x24\x3c\x58\x48\x03\x00\x36\x64\x88\xb0\xdb\x36\x03\xe2\x98\xbe\x72\xbe\x0b\x1e\x13\xeb\x43\xe8\x2d\xc8\xd1\x24\xa6\x82\xe3\x46\x05\xff\x6d\x27\x9d\xb1\x87\xed\xbd\x44\x88\x46\xda\x4f\x3f\x54\xf0\xa9\xf9\x30\x58\x05\x0d\xac\x07\x74\xda\x32\x13\xf8\x2d\xfb\xc2\x36\xdc\x55\x18\x33\x5e\x9b\x3e\xd0\xd1\xf8\x27\xe6\x8c\x67\x2a\x65\xb4\xe0\xa5\x32\xf1\x10\xf4\xa1\xbd\x11\xda\xec\x89\xb2\x32\xa5\x6d\xe3\xb4\xa5\x56\x1e\xc2\x33\x92\xd3\x91\xd2\x9d\x79\x05\x4d\xf3\x5f\x10\x67\xc3\x63\x5a\xba\xa9\x60\x43\xa4\xb4\x8f\x70\xa0\xb7\x9b\x4d\xc9\xbe\x7a\x5f\x81\xbb\x6e\xc1\x39\x97\x28\x4d\x2a\x06\x6b\xd7\xa0\x0b\x0d\xe1\x15\xab\xe1\xae\x46\x23\x64\xbd\x8a\x77\x72\x0c\x2f\xd5\x91\x10\x91\x46\xe9\xaf\x7d\xe9\x7c\xa5\xcd\xc5\x3d\x67\xdf\x1a\x81\x6b\xb3\x9f\x4b\xe3\x05\x3a\x9f\x9d\x34\x2b\xac\xae\x53\xc1\x23\x78\xfc\x43\x76\x7d\x34\xfa\x94\x0f\xca\x07\x0b\x4b\xb3\x96\x28\x69\x51\x6b\xb7\x2f\x94\x34\x48\x1d\x5e\x28\xfd\xac\xc7\xd2\x18\x78\xeb\x1a\x58\x4b\xe9\x5d\xee\xd4\x3b\x3f\x47\x78\x9b\xe5\x85\xb2\x1e\xb0\xeb\x0a\xc2\x07\x4f\xfd\xb3\x83\x68\x54\xd3\x7e\xdf\x83\x47\xf2\x53\x3a\x10\x1c\x87\x7f\xe7\xdc\x43\x4a\xb2\xbf\x80\xe4\xaf\xb3\xec\x04\x96\xc1\x3c\x45\x99\x26\x12\xa5\xef\x81\xb0\x4a\x48\xe4\x78\x5c\xd8\xf3\x3f\xb1\x3d\x13\xb2\xa4\xff\x22\xb5\x7c\xeb\x73\x99\xb9\xca\xf2\xc2\xf5\xff\x13\x6b\xba\xab\x3c\xc1\xcf\x73\x9e\x26\x02\x5e\x2f\x0b\x13\xfc\xac\x13\x82\xcf\xc1\xae\xa6\x31\x8f\x60\x7e\xd5\xb3\x20\x92\x8a\x66\x44\xa2\x61\x07\x91\xa4\xa8\x3e\xba\x2b\xf2\x7e\x78\x4c\x4d\x2b\x78\x21\x64\x62\x5d\x10\xbc\x2c\xc4\xdf\x01\x00\x00\xff\xff\x8e\x08\x5a\x2a\x18\x05\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/html.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
