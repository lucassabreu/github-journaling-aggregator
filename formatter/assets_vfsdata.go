// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package formatter

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	mustUnmarshalTextTime := func(text string) time.Time {
		var t time.Time
		err := t.UnmarshalText([]byte(text))
		if err != nil {
			panic(err)
		}
		return t
	}

	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: mustUnmarshalTextTime("2017-09-25T11:53:03.072035879Z"),
		},
		"/html.html": &vfsgen۰CompressedFileInfo{
			name:             "html.html",
			modTime:          mustUnmarshalTextTime("2017-09-25T11:52:12.724855428Z"),
			uncompressedSize: 2985,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x5f\x6f\xdb\x36\x10\x7f\xf7\xa7\x38\x08\x7b\x68\x31\x48\x4c\xda\x97\xc1\xa3\x35\x74\x43\x81\x16\x68\x8a\x22\xcb\x9e\x0d\x46\x3c\x5b\x6c\xf9\x47\x25\xa9\x38\x9e\xeb\xef\x3e\x90\x94\x6c\xc9\x51\x8c\x74\x89\x9f\xe8\xfb\xf3\xe3\xfd\xee\x4e\xc7\x9b\xd1\xda\x2b\x59\xce\x68\x8d\x8c\x97\x33\x00\xea\x85\x97\x58\xee\x76\x50\xdc\x84\x13\xec\xf7\x94\x24\x59\xd0\x4a\xa1\xbf\x81\x45\xb9\xc8\x9c\xdf\x4a\x74\x35\xa2\xcf\xa0\xb6\xb8\x5a\x64\xb5\xf7\x8d\x9b\x13\xb2\x32\xda\xbb\x62\x6d\xcc\x5a\x22\x6b\x84\x2b\x2a\xa3\x88\xa8\x8c\xfe\x63\xc5\x94\x90\xdb\xc5\x15\xf3\x68\x05\x93\xbf\x7e\xac\x8c\x76\x19\x90\x27\x43\x57\x86\x63\xb1\x46\xaf\xb8\x2c\x84\x21\x97\xc5\xdb\xe2\x82\xa8\x0e\xae\xe0\x88\xcd\xb2\x69\x6d\x23\x31\x17\x9a\x8b\xb5\x29\x94\xd0\x45\xe5\x0e\x77\x44\xe4\x70\x02\xf0\xec\x56\x22\x78\x0e\x0d\xec\xa2\x00\x20\x04\x9e\x3b\xf1\x2f\xce\xe1\xf2\x6d\x73\xff\x7b\x14\xef\x83\x1f\xe9\x1c\x29\x49\x79\xa2\xb7\x86\x6f\xcb\x19\xe5\xe2\x0e\x2a\xc9\x9c\x5b\x64\x8a\xcb\x5c\xb2\xad\x69\x3d\x1c\x8f\x79\xbe\x12\xf7\xc8\xf3\xe0\x85\x36\x2a\xbe\xba\xa1\x59\x65\xa4\xb1\x79\xbe\xb6\xb8\xcd\x2f\x2f\x2e\xb2\x18\x65\x67\xfd\x00\x78\xb9\x1c\xe0\x8c\x45\x79\xee\x2a\x6b\xa4\x9c\x02\x1d\xc8\x3c\xde\xfb\x4e\xf1\x5b\x77\x1b\xc0\x34\x8b\x03\xb2\x35\x9b\xce\x30\x24\xb0\x61\xfa\xa1\x6d\x1e\x1b\x24\x3b\xe9\x9a\x60\xdb\xdd\x40\xb8\xb8\x8b\xd4\x48\x02\x8d\x67\xc5\xc4\x04\xd6\x72\x59\x19\xed\x51\xfb\x3e\xba\x56\x8e\x8c\x84\xeb\x32\x87\x3d\x5b\x94\x32\xcf\x2f\xdf\x04\x8a\x87\x40\x77\x3b\xb0\x4c\xaf\x11\x8a\xf7\xd6\x1a\xeb\x60\xbf\xef\x34\xb1\xd3\x4e\x11\x97\x4b\xe1\x51\x25\x02\xd1\x21\x12\x90\x62\x00\x87\x9a\xf7\x20\x94\xb4\xb2\x9c\xa5\x63\x6a\xa3\x01\x1c\x67\x9e\xe5\x49\xda\x95\xfb\x44\xe2\x6a\xc6\xcd\x26\xcf\xdf\xf0\xe6\x09\x44\xa8\xef\xbf\xcc\xc3\xff\xe9\xdb\x96\xcb\xe4\xaf\x8d\xce\x75\xab\xd0\x8a\x2a\x2b\xdf\xdf\xa1\xf6\xf0\x99\x29\xa4\xc4\xd7\xff\x17\xe5\x66\xdb\x3c\xcb\xff\x1a\x1b\xf3\xec\x20\xae\xd0\x39\xb6\x1e\x41\x84\xf3\x20\x39\xd4\xa7\xaf\xb2\xc7\x3f\xf6\x40\xe7\x3b\xea\x82\x60\x6f\xcb\xc1\xdf\xe8\xf0\xcb\xba\x6e\x61\xbe\x80\xc6\x0a\xed\x21\xce\x9d\x39\x21\x6b\xe1\xeb\xf6\x36\xce\xb1\x0c\x5e\x71\xb4\xb8\x72\xde\x42\x11\x88\x15\x81\xd8\xeb\x31\x72\xc0\xe6\x3f\xc1\x8d\x36\xa9\xf3\x42\xb5\x02\x5c\xec\xbe\xa6\xa4\xc4\xf3\xf2\xf9\xb0\xa1\x7c\x2f\x8b\x78\xe0\xfd\x22\xb0\xa0\x52\x79\xb2\x31\x04\x00\x6d\x4e\x25\xb1\x46\x62\x05\xf8\x7d\x58\x86\x40\xf0\x35\x64\x5f\x5a\x29\xaf\xf1\x7b\x8b\xce\xc7\x4c\x66\xa7\x45\x09\xbf\x60\x04\x9d\x15\x50\xd6\xbd\x2f\x7d\xe5\xf7\x7b\xd2\xb4\x52\x92\x40\xf2\x0b\xdb\x4a\xc3\x78\x31\x80\x2d\x3e\xb7\xea\x16\xc3\x70\x48\xa3\x62\xca\xe4\x38\xff\x58\x09\x43\xa3\x77\x95\x17\x46\x4f\xc5\x14\xa6\x8b\x74\x78\x86\x98\xab\xcf\x31\x72\x35\x72\xa8\x8c\x52\x62\x9a\x52\x52\x8d\x48\xfd\xfd\xe1\xdd\x03\x16\xdd\x57\x02\x3f\x40\x31\xfb\x8d\x9b\x8d\xee\x68\xfc\x74\xc0\x1f\x9d\x6b\xd1\x3d\x1e\x72\xd4\x4f\x86\x2a\xa2\xe7\x28\xd4\x68\xfc\x58\xe6\x93\xb2\xcf\x39\xbc\x3a\xe3\xf8\xfa\x45\x2b\x72\x28\xf8\x35\xde\x09\xdc\xfc\x65\x94\x42\x7d\xa6\xef\x26\xee\xfd\x01\xbe\x8f\x7b\x98\x8a\x83\x59\x87\x59\x7c\xb8\xb9\xfa\xf4\xcf\xf5\xa7\xc8\xbd\x4a\xb2\xc9\xaa\x84\xce\x05\x7b\xa6\xb5\x27\x92\xfb\x9c\xe6\xde\x08\x5f\xcf\xcf\x12\xed\x19\xfc\x69\xf8\x76\xdc\x56\x8f\x66\x7c\x42\x95\x30\x27\xbb\x73\x12\xe6\xf8\x50\x1f\x7f\x61\x4a\x8d\x07\xd4\xc9\xc8\xa2\x64\xf8\x1a\x9c\xc2\x50\x32\x78\x5b\x28\x89\x93\x2c\xed\x33\x61\x89\x09\x7b\x61\x5c\x70\xa8\xab\xac\x68\x3c\x70\x5c\xa1\x05\x67\xab\xa7\x6e\xae\x61\x4d\xfd\xea\xb2\x92\x92\x84\x10\x10\xbb\x15\x93\xa4\x05\xfd\xbf\x00\x00\x00\xff\xff\x78\xb7\x18\xdf\xa9\x0b\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/html.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
