// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package formatter

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	mustUnmarshalTextTime := func(text string) time.Time {
		var t time.Time
		err := t.UnmarshalText([]byte(text))
		if err != nil {
			panic(err)
		}
		return t
	}

	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: mustUnmarshalTextTime("2017-09-25T11:28:00.830036788Z"),
		},
		"/.html.html.swp": &vfsgen۰CompressedFileInfo{
			name:             ".html.html.swp",
			modTime:          mustUnmarshalTextTime("2017-09-25T11:28:08.886785813Z"),
			uncompressedSize: 12288,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\x3d\x6c\x1c\x45\x14\xc7\xff\x41\xca\x5d\x6c\xdf\x9d\x09\x89\x68\x99\x6c\x28\x88\x60\x77\x6d\xa7\x89\xcc\xfa\x20\x12\x91\x48\xe1\x28\x0a\x01\x44\x81\x4e\xe3\xdd\xb9\xbd\xb5\x67\x77\xd6\x33\xb3\xb1\x8f\xc3\x50\x82\x04\x5d\xfa\x34\x54\x50\x22\x2a\x1a\x24\x04\x12\x54\x28\xa2\x40\x42\x48\x48\x54\xb4\x14\x48\x50\x05\xed\xc7\x5d\xd6\xe7\xb3\x09\x09\x22\x02\xe6\x57\xf8\x76\xde\xbc\x79\x1f\xb3\x6f\xdf\xac\x75\xb7\xb1\xf4\xca\xe5\x75\x72\xc1\x59\x02\x80\x47\x81\xe7\x7f\xfe\xea\xb5\x5f\x4f\x9e\xc6\x99\x53\x80\x2f\x02\x26\x85\xbf\x25\x71\x34\xb9\x9e\x1d\x53\x7f\x10\x25\xec\x28\xbd\xb7\x26\x06\xdd\x1d\x21\xb7\x54\x4a\x7d\xe6\x86\x82\xd3\x24\x74\x95\xf4\xdd\x30\xd2\x83\x6c\xc3\xf1\x45\xec\xf2\xcc\xa7\x4a\xd1\x0d\xc9\xb2\x4a\x6c\x6f\x8a\x4c\x26\x94\x47\x49\x68\xd3\x30\x94\x2c\xa4\x5a\x48\xb7\x2f\x64\x4c\xb5\x66\xd2\xa5\x4a\x31\xad\xdc\x81\x8e\xb9\x93\xff\xf9\x93\xa0\x0d\x86\xff\x13\x99\xee\xdb\x17\xda\x38\xbf\xb2\x5c\x3c\xea\x67\xad\x33\xe4\xd4\x63\x2f\x3f\xec\xa8\x0c\x06\x83\xc1\x60\x30\x18\x0c\x06\xc3\x3f\x88\x4e\x8f\xe1\x6d\x00\x8f\x54\x63\xaf\xfa\x3c\x36\xf5\x69\x30\x18\x0c\x06\x83\xc1\x60\x30\x18\x0c\x06\x83\xe1\xdf\x0b\x0d\x80\x5b\xc7\x81\x8f\x1a\xe5\xf7\xff\xe3\xff\xff\xef\x2c\x02\xbf\x2d\x02\xbf\x2c\x02\xdf\x2e\x02\xbb\x8b\xc0\xe9\x45\x60\x7e\x11\xf8\xbd\x03\xfc\xd4\x01\x7e\xe8\x00\xb7\x3b\xc0\xd7\x1d\xe0\xf3\x0e\x90\x74\x00\x74\x80\xef\xda\xc0\xad\x36\x70\xb3\x0d\xbc\xd3\x06\x36\xda\x80\xd3\x06\x4e\xb7\x81\x1f\x5b\xc0\x37\x2d\xe0\xcb\x16\xf0\x45\x0b\x60\x2d\xe0\xd5\x16\x70\xb2\x05\xdc\x5e\x00\xde\x5f\x00\x2e\x2f\x00\xab\x0b\xc0\x33\x0b\x40\x67\x01\xb8\x33\x0f\x7c\x32\x0f\xbc\x3e\x0f\x2c\xe4\xd7\x73\xc0\xf6\x1c\xd0\x9b\x03\x9e\x98\x03\xde\x3b\x01\xac\x9f\x00\xbe\x6f\x02\x9f\x35\x81\x9b\x4d\x60\xd8\x04\xfa\x4d\xe0\x7a\x13\x78\xa1\x09\xac\x34\x81\xb3\x4d\xe0\xf1\x26\xd0\x6a\x02\xc7\x9b\xc0\xa7\x0d\xe0\xe3\x46\x99\xfb\x87\x0d\xe0\x83\x06\xf0\x6e\x03\xd8\x6e\x00\x69\xe3\x21\xdf\x18\x83\xc1\x60\xf8\xaf\xe1\x15\xbf\xd0\xea\xc2\x73\x37\x44\x30\xec\xc2\x53\xbe\x8c\x52\x7d\x88\x98\x04\xac\x5f\x4e\x79\x47\x68\x30\x49\x94\xf4\xd7\xac\x81\xd6\xa9\x5a\x75\x5d\x5f\x04\xcc\x09\x99\x8e\x03\xee\x44\xc2\x5d\x76\xce\x3b\x4b\x6e\x4c\x35\x93\x11\xe5\x4e\x1c\x25\xce\xa6\xb2\xba\x9e\x5b\x5a\xc8\x4d\x06\xd1\x8d\x2e\x08\xf1\xdc\x98\x46\x49\x7e\x95\x5f\x6b\xba\xc1\x59\x39\x28\x86\xa5\x5f\x52\x31\x1a\x11\x96\x04\x64\x6f\x6f\x22\x29\x94\x64\xb7\x36\x2e\x24\xc1\x7e\x49\x2e\x4b\xa7\x45\xb3\xcd\xd5\xe6\x9c\x75\xa6\x14\x0d\x19\x79\x93\xc4\x54\x6e\x05\x62\x27\x99\xa5\x9b\x5b\xe1\x8a\xcd\x9a\xba\x9a\xa9\x01\x0b\x88\x2f\xe2\x38\xd2\xc4\xa3\x64\x20\x59\x7f\xcd\x1a\x8d\xc8\x93\xe1\x20\x23\x7b\x7b\x6e\x39\xe5\xe6\xde\xae\xd2\x21\x17\x34\x70\x5e\x7a\xf1\x22\xd9\xdb\xb3\xba\x75\xd9\xcc\x48\x3c\x97\xce\xce\x29\x8f\x26\xea\x13\xb6\x4d\x9e\x0a\x98\x64\x7d\xa5\x25\x71\xae\x0f\x53\x76\x8e\x58\x79\x48\x97\x6e\xb0\x44\x5b\xb3\x03\xe6\x9c\x5c\x63\xdb\x19\x53\xb3\xe3\x4d\x33\xce\xf7\x45\x9b\xaf\xa8\x16\x38\x57\xb2\x78\x83\xc9\x03\xc1\xd7\x55\xae\x47\x9a\xb3\x2a\x76\x52\x57\xba\xe8\xeb\x48\x1c\xb6\xbf\x87\x27\x33\xb1\x7c\x58\x4e\xde\xd4\x7d\xf7\x74\x40\x7c\x4e\x95\x5a\xb3\xe2\x80\xdb\x01\xd5\xd4\x2e\x8a\xae\xd7\xf3\x19\xe7\xb6\x9d\x88\xc4\x4e\xb2\x98\xc9\xc8\x27\x71\xb9\xed\xd6\xfd\x9b\xb0\xba\x5e\x5a\x6c\xc6\x35\x96\x0a\xe7\x0a\x8d\xcb\xe4\xd3\xee\xc1\x22\xbd\x2f\xb3\xf9\x46\xfc\xbd\x16\x8b\x8d\x3c\x32\xd0\x71\x39\xac\xae\x91\x54\x46\x89\x26\x45\x13\x58\x75\xeb\x3f\x26\xb5\xea\x77\x6b\x92\xfb\xb9\xa9\x47\xb7\xfe\xe4\x8e\x46\x44\xd2\x24\x64\x93\xc7\x4e\xdd\x55\xf6\xf6\xf5\x01\xcf\xd5\x03\x46\x6b\x41\x79\x7a\xf0\x17\xf2\xac\xcc\xe7\x56\xee\xd7\x44\x9e\x10\xc9\x13\x7a\x10\x23\xf9\xad\x7b\x90\xf5\xc5\x8d\x3a\x10\x85\x57\xdb\x1b\xaf\x58\x3c\xdb\x24\xc9\x87\x9b\x6a\x5a\xa2\x06\x34\x10\x3b\xb6\xbd\x12\xa4\xc5\x38\xf7\x3b\xb9\xb0\xed\xe5\x15\xdb\x17\xdc\xea\xa2\x6a\xd7\x19\x1f\xfb\x3d\xd8\x4b\x3d\x1e\xd5\x5d\xf3\x48\xe9\x5e\x2f\xd2\x2c\x2e\xbb\xc3\x25\x29\x85\x2c\x6a\x8c\x47\x35\x23\x55\x0d\x14\xb3\x93\x0a\xf0\x32\x3e\x6d\xea\xc8\xe8\x08\xf1\xf2\x43\x65\xdf\x1a\x3a\x14\x99\xee\xf5\x7c\x91\xe8\xbc\x53\x94\x47\x4f\xbe\x57\x4c\x8e\x0f\x9f\xea\x44\x2a\x06\x2a\xa5\x33\xd6\xdb\x3a\xef\x5f\x65\x02\x77\x5b\x59\xae\x5b\xd9\x08\xa2\x1b\xb3\xbc\x96\x7e\x6c\x29\x76\x4a\xc7\xe5\xf8\x70\x4d\x32\x63\xb1\xad\x7c\x29\xc6\xf9\x0a\x2e\xa4\x6d\x87\x92\x0d\xed\xe5\xa5\xa5\x9a\x4c\xb3\x5d\x5d\x4d\x5c\x58\x5a\xb2\xba\x98\x1d\x52\xcd\x81\x6d\xf7\xa3\x5d\x16\xd8\x35\xcf\x9b\xaa\xae\x36\xe5\x2c\xb7\x59\xbd\x0e\xb8\xe3\x5a\xf3\x5c\xa5\x87\xe3\x83\x7b\x5c\x02\x7d\x91\x68\x5b\x45\x6f\xb0\x55\xb2\x7c\x3e\xdd\x7d\xb6\x10\x97\xa5\xa6\x03\x92\x92\x51\xbe\x70\xb2\xce\xe3\x51\xb2\x45\x24\xe3\x6b\x56\x21\x53\x03\xc6\xb4\x55\x9d\x40\xf7\xf6\x96\x11\x30\x96\xf6\xd2\x4c\xa6\x9c\xd9\x51\x12\x44\xa1\x28\x5e\x3c\x7c\xa5\x2c\xe2\xde\xb3\x8f\x3c\x6c\xe5\x84\x42\x84\x9c\xd1\x34\x52\x45\x3f\x8b\x7c\x91\x3c\xd7\xa7\x71\xc4\x87\x6b\xeb\x95\xbf\xa7\x2f\xfb\x22\x99\x98\x2e\x2a\x63\xaa\x30\x4a\x19\xbc\x72\x9b\xbc\xf2\x65\x0a\x7f\x04\x00\x00\xff\xff\xe4\x12\x6e\xe7\x00\x30\x00\x00"),
		},
		"/html.html": &vfsgen۰CompressedFileInfo{
			name:             "html.html",
			modTime:          mustUnmarshalTextTime("2017-09-25T11:28:00.786703013Z"),
			uncompressedSize: 2390,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x96\xcd\x8e\xdb\x36\x10\xc7\xef\x7e\x8a\x81\xd0\x43\x83\x82\xe2\x6e\x72\x29\xb6\xb4\x8a\x1c\x02\xb4\x87\x04\x41\x9a\xbb\xc0\x15\xc7\x12\x13\x8a\x64\x48\x6a\x77\x5d\xd7\xef\x5e\xf0\xc3\xb6\xec\x55\x83\x6d\x76\x7d\xa2\x87\x33\x3f\xcd\x9f\x33\x1a\x6a\xc5\x86\x30\xaa\x66\xc5\x06\xe4\xa2\x59\x01\xb0\x20\x83\xc2\x66\xb7\x83\xfa\x73\x5c\xc1\x7e\xcf\x68\xb6\xc5\x5d\x25\xf5\x57\x70\xa8\xd6\x95\x0f\x5b\x85\x7e\x40\x0c\x15\x0c\x0e\x37\xeb\x6a\x08\xc1\xfa\x1b\x4a\x37\x46\x07\x5f\xf7\xc6\xf4\x0a\xb9\x95\xbe\xee\xcc\x48\x65\x67\xf4\xef\x1b\x3e\x4a\xb5\x5d\xbf\xe7\x01\x9d\xe4\xea\x97\x3f\x3b\xa3\x7d\x05\xf4\xc9\xe8\xce\x08\xac\x7b\x0c\xa3\x50\xb5\x34\xf4\xba\x7e\x53\x5f\xd1\xb1\xe0\x6a\x81\x68\x5b\x3b\x39\xab\x90\x48\x2d\x64\x6f\xea\x51\xea\xba\xf3\xc7\x67\x24\x72\x5c\x01\x04\x7e\xab\x10\x82\x00\x0b\xbb\x64\x00\x88\x89\x13\x2f\xff\xc6\x1b\xb8\x7e\x63\x1f\x7e\x4b\xe6\x7d\x8c\xa3\x25\x90\xd1\x7c\x4e\xec\xd6\x88\x6d\xb3\x62\x42\xde\x41\xa7\xb8\xf7\xeb\x6a\x14\x8a\x28\xbe\x35\x53\x80\xd3\x92\x90\x8d\x7c\x40\x41\x62\x14\xba\xb4\xf1\xc5\xcf\xdd\x3a\xa3\x8c\x23\xa4\x77\xb8\x25\xd7\x57\x57\x55\xca\xb2\x78\x3f\x02\xb7\xed\x8c\x73\x6e\x22\xc4\x77\xce\x28\xb5\x04\x9d\xd9\x02\x3e\x84\xb2\xf1\x6b\x79\x1a\xc0\xb2\x8a\x23\xd9\x99\xfb\xe2\x18\x0f\xd0\x72\xfd\xd8\x97\xa4\x06\xa9\x2e\xba\x26\xfa\x96\x27\x50\x21\xef\x92\x34\x9a\xa1\x69\x3d\x72\xb9\xc0\x6a\xdb\xce\xe8\x80\x3a\x1c\xb2\x9b\xd4\x99\x93\xf4\xe5\xe4\xf0\xa0\x16\x95\x22\xe4\xfa\x75\x94\x78\x4c\x74\xb7\x03\xc7\x75\x8f\x50\xbf\x73\xce\x38\x0f\xfb\x7d\xd9\x49\x9d\x76\x49\x6c\x5b\x19\x70\xcc\x02\x52\x40\x12\xa0\xe4\x0c\x87\x5a\x1c\x20\x8c\x4e\xaa\x59\xe5\x65\x6e\xa3\x19\x4e\xf0\xc0\x49\xb6\x96\x72\x5f\x58\xfc\xc0\x85\xb9\x27\xe4\xb5\xb0\x4f\x10\xc2\xc2\xe1\xcd\x3c\xfe\x5f\x7e\x5a\xdb\xe6\x78\x6d\x34\xd1\xd3\x88\x4e\x76\x55\xf3\xee\x0e\x75\x80\x0f\x7c\x44\x46\xc3\xf0\xa3\x94\xcf\x5b\xfb\xac\xf8\x4f\x68\xcd\xb3\x93\x78\x8f\xde\xf3\xfe\x0c\x11\xd7\xb3\xc3\x61\x21\xbf\x95\x07\xfe\xa9\x07\x4a\xec\x59\x17\x44\x7f\xd7\xcc\xfe\xa6\x80\x9f\xfa\x61\x82\x9b\x35\x58\x27\x75\x80\x34\x77\x6e\x28\xed\x65\x18\xa6\xdb\x34\xc7\x2a\xf8\x59\xa0\xc3\x8d\x0f\x0e\xea\x28\xac\x8e\xc2\x5e\x9d\x93\x23\x5b\xfc\x0f\x6d\xcc\xe6\xce\x8b\xd5\x8a\xb8\xd4\x7d\xb6\x61\x34\x88\xe6\xf9\xd8\x58\xbe\x97\x25\x1e\x75\xbf\x08\x16\xc6\x5c\x9e\xea\x1c\x01\xc0\xec\xa5\x25\xd5\x48\x6e\x00\xbf\xcd\xcb\x10\x05\xbe\x82\xea\xe3\xa4\xd4\x27\xfc\x36\xa1\x0f\xe9\x24\xab\xcb\xa2\xc4\x5f\x74\x82\xe2\x05\x8c\x97\xfb\xe5\x50\xf9\xfd\x9e\xda\x49\x29\x1a\x45\x7e\xe4\x5b\x65\xb8\xa8\x67\xd8\xfa\xc3\x34\xde\x62\x1c\x0e\x79\x54\x2c\xb9\x9c\xe6\x1f\x6f\x60\xee\xf4\xb6\x0b\xd2\xe8\xa5\x9c\xe2\x74\x51\x1e\xbf\x23\xcc\x0f\xdf\x53\xe4\x07\x14\xd0\x99\x71\x94\xcb\x92\xf2\xd6\x99\xa8\xbf\xfe\x78\xfb\x48\x45\x79\x4b\xe0\x1f\x18\xb9\xfb\x2a\xcc\xbd\x2e\x32\xfe\x33\xe1\x85\x6c\xd2\xe6\x32\x6a\x11\x73\x9a\xaa\xb3\xba\xd3\x8b\xc2\x5f\xf6\x17\xa3\xf3\x57\xf7\x12\xc3\xe8\x6c\x10\x30\x9a\xda\x2e\x5f\x3e\xf1\xc6\x89\x97\x78\xba\x8d\x98\xef\x9c\xb4\x01\x04\x6e\xd0\x81\x77\xdd\x53\x3f\x33\xe2\x37\xc5\x17\x5f\x35\x8c\x66\x42\x24\x96\xef\x01\x9a\xbf\xa6\xfe\x0d\x00\x00\xff\xff\xb3\xc8\x29\xc2\x56\x09\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/.html.html.swp"].(os.FileInfo),
		fs["/html.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
