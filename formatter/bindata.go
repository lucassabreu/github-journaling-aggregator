// Code generated by go-bindata.
// sources:
// assets/.report.html.swp
// assets/report.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsReportHtmlSwp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xd9\xbf\x4e\xeb\x30\x14\x06\xf0\xaf\x57\xba\xd2\x1d\x2e\x0a\x82\x17\x30\x30\x37\x6e\x61\x61\x88\x2a\x21\x26\x24\xfe\x0c\xb4\x08\x46\x37\x35\x4e\x21\xa9\x2b\xdb\x11\x43\x55\x78\x03\x5e\x85\x85\x99\x0d\x66\x1e\x85\x95\x0d\xb5\x69\x17\x96\x32\x51\x21\xbe\xdf\x72\x4e\x4e\xbe\x44\x67\xc9\x10\xb9\xdb\x38\x3b\x38\x12\xbb\x71\x03\x00\x56\x81\x87\xc7\xe7\x8b\xe6\x79\x1b\xff\xfe\x03\x79\x99\x2a\x8f\xc5\x8e\x4f\xda\xf5\xc3\xce\xfe\xde\xe9\x82\xdc\xed\xf4\x85\xf2\xc6\xba\x6b\x3f\x54\xa9\x96\xc6\xe6\x6a\x60\xa4\x77\xa9\x34\xfd\x90\x95\xdd\x38\xb5\x85\x9c\xa6\xbc\xea\x3a\x5d\xce\xc6\xf5\x2b\x5b\xba\x81\xca\xfb\x03\x53\x57\xc6\x38\x6d\x54\xb0\x4e\x5e\x5a\x57\xa8\x10\xb4\x93\xca\x7b\x1d\xbc\x74\x7a\x68\x5d\x88\xb3\x50\xe4\x5f\x58\x9b\xe8\x97\x59\xc1\xce\x76\x73\xfa\xa9\x6f\x6d\x6e\x88\xf5\xb5\xce\xb2\x17\x22\x22\x22\x22\x22\xa2\x6f\x14\x86\x35\xdc\x01\xf8\x33\xbb\xfe\x3b\xab\xb5\x4f\x95\x88\x88\x88\x88\x88\x88\x88\x7e\x2e\xd5\x03\xee\x23\xe0\x29\xaa\xce\xff\xe7\xff\xff\xef\x11\xf0\x16\x01\xaf\x11\xf0\x32\xbf\x4f\x44\x44\x44\x44\x44\x44\x44\x4b\x90\xc8\x2c\x14\x79\x0b\x42\x24\x32\xd3\xaa\x37\xe9\x84\x48\x42\x3f\xe4\xba\x35\x1a\x89\xb8\x3d\xe9\xc4\x78\x9c\xc8\x6a\x36\x49\x56\xc1\xa4\x7a\xf2\x23\x00\x00\xff\xff\x52\x28\xf1\x4d\x00\x30\x00\x00")

func assetsReportHtmlSwpBytes() ([]byte, error) {
	return bindataRead(
		_assetsReportHtmlSwp,
		"assets/.report.html.swp",
	)
}

func assetsReportHtmlSwp() (*asset, error) {
	bytes, err := assetsReportHtmlSwpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/.report.html.swp", size: 12288, mode: os.FileMode(384), modTime: time.Unix(1506129079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsReportHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\xc9\x28\xc9\xcd\xb1\xe3\x52\x50\xb0\xc9\x48\x4d\x4c\x01\x31\x14\x14\x6c\x4a\x32\x4b\x72\x52\xed\xaa\xab\x15\xf4\x42\x40\x2c\x85\xda\x5a\x1b\x7d\x88\x18\x48\xa1\x3e\x44\xa5\x8d\x3e\x44\x2b\x20\x00\x00\xff\xff\x97\xf7\x9b\x38\x42\x00\x00\x00")

func assetsReportHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsReportHtml,
		"assets/report.html",
	)
}

func assetsReportHtml() (*asset, error) {
	bytes, err := assetsReportHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/report.html", size: 66, mode: os.FileMode(420), modTime: time.Unix(1506129071, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/.report.html.swp": assetsReportHtmlSwp,
	"assets/report.html": assetsReportHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		".report.html.swp": &bintree{assetsReportHtmlSwp, map[string]*bintree{}},
		"report.html": &bintree{assetsReportHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

